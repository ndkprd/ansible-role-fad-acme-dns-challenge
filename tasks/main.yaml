
---
# ./tasks/main.yaml

- name: Include pre-task tasks.
  include_tasks: pre_task.yaml
  when: "'certificate-server' in group_names"

- name: Include tasks to generate private key and CSR.
  include_tasks: generate_private_key_and_csr.yaml
  when: "'certificate-server' in group_names"

- name: Create a challenge for the wildcard domain using a account key file.
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_private_account_key_dir }}"
    account_email: "{{ acme_account_email }}"
    src: "{{ acme_csr_dir }}"
    cert: "{{ acme_cert_dir }}"
    challenge: "dns-01"
    acme_directory: "{{ acme_server_dir }}"
    remaining_days: "{{ acme_remaining_days }}"
    acme_version: 2
    terms_agreed: true
  register: dns_challenge
  when: "'certificate-server' in group_names"

# - name: Debug dns_challenge variable.
  # ansible.builtin.debug:
    # var: dns_challenge

- name: Extract the DNS-01 ACME Challenge TXT value for base domain.
  ansible.builtin.set_fact:
    base_dns_challenge_txt: "{{ dns_challenge.challenge_data[base_domain]['dns-01'].resource_value }}"
  when: dns_challenge.challenge_data[base_domain]['dns-01'].resource_value is defined

- name: Extract the DNS-01 ACME Challenge TXT value for wildcard domain.
  ansible.builtin.set_fact:
    wildcard_dns_challenge_txt: "{{ dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value }}"
  when: dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value is defined

# - name: Print out the auth subdomain and the DNS-01 TXT value.
  # ansible.builtin.debug:
    # msg: "The domain used for authentication is {{ dns_auth_subdomain }} with TXT value of {{ dns_challenge_txt }}."
  # when: dns_challenge.challenge_data_dns is defined

- name: Create TXT Record on FortiADC using REST API for base domain.
  ansible.builtin.uri:
    method: POST
    url: "https://{{ ansible_host }}/api/global_dns_server_zone_child_txt_record?pkey=fqdn_generate_{{ base_domain }}."
    body_format: json
    validate_certs: false
    headers:
      'Content-Type': 'application/json'
      'APITOKEN': '{{ fad_apitoken }}'
    body: "{\"name\": \"_acme-challenge\", \"text\": \"{{ hostvars['localhost']['base_dns_challenge_txt'] }}\", \"ttl\": \"-1\"}"
  # loop: "{{ fortiadc }}"
  # loop_control:
    # label: "{{ item.host }}"
  # when: dns_challenge.challenge_data[base_domain]['dns-01'].resource_value is defined
  when: "'fortiadc' in group_names"
  delegate_to: localhost
  register: status
  changed_when: status == 200

- name: Create TXT Record on FortiADC using REST API for wildcard domain.
  ansible.builtin.uri:
    method: POST
    url: "https://{{ ansible_host }}/api/global_dns_server_zone_child_txt_record?pkey={{ base_domain }}"
    body_format: json
    validate_certs: false
    headers:
      'Content-Type': 'application/json'
      'APITOKEN': '{{ fad_apitoken }}'
    body: "{\"name\": \"_acme-challenge\", \"text\": \"{{ hostvars['localhost']['wildcard_dns_challenge_txt'] }}\", \"ttl\": \"-1\"}"
  delegate_to: localhost
  #loop: "{{ fortiadc }}"
  #loop_control:
    #label: "{{ item.host }}"
  # when: dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value is defined
  when: "'fortiadc' in group_names"
  register: status
  changed_when: status == 200

- name: Wait for 30 seconds.
  ansible.builtin.pause:
    seconds: 30
  when: base_dns_challenge_txt is defined or wildcard_dns_challenge_txt is defined and 'certificate-server' in group_names

- name: Let the challenge be validated and retrieve the cert and intermediate certificate.
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_private_account_key_dir }}"
    account_email: "{{ acme_account_email }}"
    src: "{{ acme_csr_dir }}"
    cert: "{{ acme_cert_dir }}"
    fullchain: "{{ acme_cert_fullchain_dir }}"
    chain: "{{ acme_cert_intermediate_dir }}"
    challenge: dns-01
    acme_directory: "{{ acme_server_dir }}"
    remaining_days: "{{ acme_remaining_days }}"
    acme_version: 2
    data: "{{ dns_challenge }}"
  when: dns_challenge is changed and 'certificate-server' in group_names
