
---
# ./roles/fortiadc-dns-01-acme/tasks/main.yaml

- name: Make sure OpenSSL and python-pip is installed.
  ansible.builtin.package:
    name:
      - openssl
      - python3
      - python3-pip
      - python3-setuptools
    state: latest
    update_cache: true

- name: Set Python interpreter
  set_fact:
    ansible_python_interpreter: /bin/python3

- name: Make sure the needed Python module is installed.
  ansible.builtin.pip:
    name:
      - cryptography
    state: latest

- name: Make sure the needed directory exists.
  ansible.builtin.file:
    path: "{{ acme_files_dir }}"
    state: directory

- name: Generate an OpenSSL RSA 4096 private key for account.
  community.crypto.openssl_privatekey:
    path: "{{ acme_private_account_key_dir }}"
    size: 4096
    type: RSA

- name: Generate an OpenSSL RSA 4096 private key for CSR.
  community.crypto.openssl_privatekey:
    path: "{{ acme_private_cert_key_dir }}"
    size: 4096
    type: RSA

- name: Generate an OpenSSL Certificate Signing Request.
  community.crypto.openssl_csr:
    path: "{{ acme_csr_dir }}"
    privatekey_path: "{{ acme_private_cert_key_dir }}"
    country_name: "{{ cert_country_id }}"
    common_name: "{{ base_domain }}"
    organization_name: "{{ cert_org_name }}"
    email_address: "{{ acme_account_email }}"
    subject_alt_name: "{{ cert_san | map('regex_replace', '^', 'DNS:') | list }}"

#- name: Create underscore variable based on base domain
  #ansible.builtin.set_fact:
    #base_domain_variable: "{{ acme.base_domain | regex_replace('\\.', '_') }}"

- name: Create a challenge for the wildcard domain using a account key file.
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_private_account_key_dir }}"
    account_email: "{{ acme_account_email }}"
    src: "{{ acme_csr_dir }}"
    cert: "{{ acme_cert_dir }}"
    challenge: "dns-01"
    acme_directory: "{{ acme_server_dir }}"
    remaining_days: "{{ acme_remaining_days }}"
    acme_version: 2
    terms_agreed: true
  register: dns_challenge

#- name: Debug dns_challenge variable.
  #ansible.builtin.debug:
    #var: dns_challenge

#VERSION 0.1
#- name: Extract ACME TXT value.
  #ansible.builtin.set_fact:
    #dns_challenge_txt: "{{ dns_challenge.challenge_data[acme_wildcard_domain]['dns-01'].resource_value }}"

- name: Extract the DNS-01 ACME Challenge TXT value for base domain.
  ansible.builtin.set_fact:
    base_dns_challenge_txt: "{{ dns_challenge.challenge_data[base_domain]['dns-01'].resource_value }}"
  when: dns_challenge.challenge_data[base_domain]['dns-01'].resource_value is defined

- name: Extract the DNS-01 ACME Challenge TXT value for wildcard domain.
  ansible.builtin.set_fact:
    wildcard_dns_challenge_txt: "{{ dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value }}"
  when: dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value is defined

#- name: Print out the auth subdomain and the DNS-01 TXT value.
  #ansible.builtin.debug:
    #msg: "The domain used for authentication is {{ dns_auth_subdomain }} with TXT value of {{ dns_challenge_txt }}."
  #when: dns_challenge.challenge_data_dns is defined

#using PUT against an existing record to make sure it doesn't add more additional record
- name: Create TXT Record on FortiADC using REST API for base domain.
  ansible.builtin.uri:
    method: POST
    url: "https://{{ item.host }}/api/global_dns_server_zone_child_txt_record?pkey={{ item.zone_name }}"
    body_format: json
    validate_certs: false
    headers:
      'Content-Type': 'application/json'
      'APITOKEN': '{{ item.api_token }}'
    body: "{\"name\": \"_acme-challenge\", \"text\": \"{{ base_dns_challenge_txt }}\", \"ttl\": \"-1\"}"
  delegate_to: localhost
  loop: "{{ fortiadc }}"
  loop_control:
    label: "{{ item.host }}"
  #when: dns_challenge.challenge_data[base_domain]['dns-01'].resource_value is defined
  when: base_dns_challenge_txt is defined
  register: status
  changed_when: status == 200

- name: Create TXT Record on FortiADC using REST API for wildcard domain.
  ansible.builtin.uri:
    method: POST
    url: "https://{{ item.host }}/api/global_dns_server_zone_child_txt_record?pkey={{ item.zone_name }}"
    body_format: json
    validate_certs: false
    headers:
      'Content-Type': 'application/json'
      'APITOKEN': '{{ item.api_token }}'
    body: "{\"name\": \"_acme-challenge\", \"text\": \"{{ wildcard_dns_challenge_txt }}\", \"ttl\": \"-1\"}"
  delegate_to: localhost
  loop: "{{ fortiadc }}"
  loop_control:
    label: "{{ item.host }}"
  #when: dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value is defined
  when: wildcard_dns_challenge_txt is defined
  register: status
  changed_when: status

- name: Wait for 30 seconds.
  ansible.builtin.pause:
    seconds: 30
  when: base_dns_challenge_txt is defined or wildcard_dns_challenge_txt is defined

- name: Let the challenge be validated and retrieve the cert and intermediate certificate.
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_private_account_key_dir }}"
    account_email: "{{ acme_account_email }}"
    src: "{{ acme_csr_dir }}"
    cert: "{{ acme_cert_dir }}"
    fullchain: "{{ acme_cert_fullchain_dir }}"
    chain: "{{ acme_cert_intermediate_dir }}"
    challenge: dns-01
    acme_directory: "{{ acme_server_dir }}"
    remaining_days: "{{ acme_remaining_days }}"
    acme_version: 2
    data: "{{ dns_challenge }}"
  when: dns_challenge is changed
