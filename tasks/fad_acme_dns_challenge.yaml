---

- name: Create a challenge for the wildcard domain using account key file for {{ item.base_domain }}.
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_private_account_key_dir }}"
    account_email: "{{ acme_account_email }}"
    src: "{{ acme_csr_dir }}"
    cert: "{{ acme_cert_dir }}"
    challenge: "dns-01"
    acme_directory: "{{ acme_server_dir }}"
    remaining_days: "{{ acme_remaining_days }}"
    acme_version: 2
    terms_agreed: true
  register: dns_challenge
  delegate_to: localhost
  run_once: true

- name: Debug dns_challenge variable for {{ item.base_domain }}.
  ansible.builtin.debug:
    var: dns_challenge
  delegate_to: localhost
  run_once: true
  tags:
    - debug

- name: Set the wildcard value for {{ item.base_domain }}.
  ansible.builtin.set_fact:
    base_domain_wildcard: "*.{{ item.base_domain }}"

- name: Extract the DNS-01 ACME Challenge TXT value for base domain for {{ item.base_domain }}.
  ansible.builtin.set_fact:
    base_dns_challenge_txt: "{{ dns_challenge.challenge_data[item.base_domain]['dns-01'].resource_value }}"
  when: dns_challenge.challenge_data[base_domain]['dns-01'].resource_value is defined
  delegate_to: localhost
  run_once: true

- name: Debug the value of base_dns_challenge_text of {{ item.base_domain }}.
  ansible.builtin.debug:
    var: base_dns_challenge_txt
  delegate_to: localhost
  run_once: true
  tags:
    - debug

- name: Extract the DNS-01 ACME Challenge TXT value for wildcard domain for {{ item.base_domain }}.
  ansible.builtin.set_fact:
    wildcard_dns_challenge_txt: "{{ dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value }}"
  when: dns_challenge.challenge_data[base_domain_wildcard]['dns-01'].resource_value is defined
  delegate_to: localhost
  run_once: true

- name: Debug the value of wildcard_dns_challenge_text of *.{{ item.base_domain }}.
  ansible.builtin.debug:
    var: wildcard_dns_challenge_txt
  delegate_to: localhost
  run_once: true

- name: Update TXT Record on FortiADC using REST API for base domain for {{ item.base_domain }}.
  ansible.builtin.uri:
    method: PUT
    url: "https://{{ ansible_host }}/api/global_dns_server_zone_child_txt_record?vdom={{ fad_vdom }}&pkey=fqdn_generate_{{ item.base_domain }}.&mkey=1001"
    body_format: json
    validate_certs: false
    headers:
      'Content-Type': 'application/json'
      'APITOKEN': '{{ fad_apitoken }}'
    body: |
      {
        "name": "_acme-challenge", 
        "text": "{{ hostvars.localhost.base_dns_challenge_txt }}", 
        "mkey": "1001",
        "ttl": "-1"
      }
  when: "hostvars.localhost.base_dns_challenge_txt is defined"
  delegate_to: localhost
  register: post_base_domain_txt_result
  failed_when: "post_base_domain_txt_result.json.payload != 0"

# - name: debug out payload value for base domain.
  # debug:
    # var: post_base_domain_txt_result

- name: Update TXT Record on FortiADC using REST API for wildcard domain for {{ item.base_domain }}.
  ansible.builtin.uri:
    method: PUT
    url: "https://{{ ansible_host }}/api/global_dns_server_zone_child_txt_record?vdom={{ fad_vdom }}&pkey=fqdn_generate_{{ item.base_domain }}.&mkey=1002"
    body_format: json
    validate_certs: false
    headers:
      'Content-Type': 'application/json'
      'APITOKEN': '{{ fad_apitoken }}'
    body: |
      {
        "name": "_acme-challenge", 
        "text": "{{ hostvars.localhost.wildcard_dns_challenge_txt }}", 
        "mkey": "1002",
        "ttl": "-1"
      }
  delegate_to: localhost
  when: "hostvars.localhost.wildcard_dns_challenge_txt is defined"
  register: post_wildcard_domain_txt_result
  failed_when: "post_wildcard_domain_txt_result.json.payload != 0"

# - name: debug out payload value for wildcard domain.
  # debug:
    # var: post_wildcard_domain_txt_result

- name: Wait for 30 seconds for {{ item.base_domain }}.
  ansible.builtin.pause:
    seconds: 30
  when: base_dns_challenge_txt is defined or wildcard_dns_challenge_txt is defined
  delegate_to: localhost
  run_once: true

- name: Let the challenge be validated and retrieve the cert and intermediate certificate for {{ item.base_domain }}.
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_private_account_key_dir }}"
    account_email: "{{ acme_account_email }}"
    src: "{{ acme_csr_dir }}"
    cert: "{{ acme_cert_dir }}"
    fullchain: "{{ acme_cert_fullchain_dir }}"
    chain: "{{ acme_cert_intermediate_dir }}"
    challenge: dns-01
    acme_directory: "{{ acme_server_dir }}"
    remaining_days: "{{ acme_remaining_days }}"
    acme_version: 2
    data: "{{ dns_challenge }}"
  delegate_to: localhost
  run_once: true